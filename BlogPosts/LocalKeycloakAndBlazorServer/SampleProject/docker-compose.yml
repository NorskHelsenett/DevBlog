services:
  blazorkc:
    image: blazorkc
    container_name: blazorkc
    depends_on:
      keycloak:
        required: true
        restart: false
        condition: service_healthy
    build:
      context: .
      dockerfile_inline: |
        FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
        WORKDIR /app

        FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
        WORKDIR /src
        COPY ["blazorkc.csproj", "./"]
        RUN dotnet restore "blazorkc.csproj"
        COPY . .
        WORKDIR "/src/"
        RUN dotnet build "blazorkc.csproj" -c Release -o /app/build

        FROM build AS publish
        RUN dotnet publish "blazorkc.csproj" -c Release -o /app/publish /p:UseAppHost=false

        FROM base AS final
        WORKDIR /app
        COPY --from=publish /app/publish .
        ENTRYPOINT ["dotnet", "blazorkc.dll"]
    ports:
      - "8080:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      LOGGING__LOGLEVEL__DEFAULT: "Trace"
      LOGGING__LOGLEVEL__MICROSOFT: "Warning"

      OIDC_IDP_ADDRESS_FOR_SERVER: "http://keycloak:8088/realms/lokalmaskin"
      OIDC_IDP_ADDRESS_FOR_USERS: "http://localhost:8088/realms/lokalmaskin"
      OIDC_CLIENT_ID: "my_app"
      OIDC_REQUIRE_HTTPS_METADATA: "false"

      HTTPCLIENT_VALIDATE_EXTERNAL_CERTIFICATES: "false"

  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    user: 1000:1001
    volumes:
      - "./keycloak:/opt/keycloak/data/import"
    ports:
      - 8088:8088
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: "password"
      KC_PROXY: "none"
      KC_LOG_LEVEL: "INFO"
      KC_HTTP_PORT: "8088"
      KC_HTTP_HOST: 0.0.0.0
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        echo 'To export config of instance you have set up, run: /opt/keycloak/bin/kc.sh export --file /opt/keycloak/data/import/keycloak-lokalmaskin.json'
        echo "importing realms"
        /opt/keycloak/bin/kc.sh import --file /opt/keycloak/data/import/keycloak-lokalmaskin.json
        echo "staring app"
        /opt/keycloak/bin/kc.sh start-dev
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\nhost: http://localhost\nConnection: close\n\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      start_period: "15s"
      interval: 30s
      timeout: 10s
      retries: 3
