# Default values for grafana-provisioner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: container-registry.example.com/plattform/grafana-provisioner
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  seccompProfile:
    type: RuntimeDefault
  supplementalGroups:
    - 100

securityContext:
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault
  privileged: false
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 80

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes:
  - name: config
    configMap:
      name: config

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: config
    mountPath: "./config.json"
    readOnly: true
    subPath: config.json

nodeSelector: {}

tolerations: []

affinity: {}

environment: Development

# organizations:
#   - name: team-example
organizations: []

grafanaUrl: ""

opentelemetryCollectorEndpoint: ""
