// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CadastreRoadAddressImportFormat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace No.Nhn.Address.Cadastre.ImportFormat {

  /// <summary>Holder for reflection information generated from CadastreRoadAddressImportFormat.proto</summary>
  public static partial class CadastreRoadAddressImportFormatReflection {

    #region Descriptor
    /// <summary>File descriptor for CadastreRoadAddressImportFormat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CadastreRoadAddressImportFormatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVDYWRhc3RyZVJvYWRBZGRyZXNzSW1wb3J0Rm9ybWF0LnByb3RvEiluby5u",
            "aG4uYWRkcmVzcy5jYWRhc3RyZS5yb2FkLmltcG9ydGZvcm1hdCL2BgoZQ2Fk",
            "YXN0cmVSb2FkQWRkcmVzc0ltcG9ydBIPCgdMb2NhbElkGAEgASgJEhoKEk11",
            "bmljaXBhbGl0eU51bWJlchgCIAEoCRIYChBNdW5pY2lwYWxpdHlOYW1lGAMg",
            "ASgJEhMKC0FkZHJlc3NUeXBlGAQgASgJEh0KFUFkZHJlc3NBZGRpdGlvbmFs",
            "TmFtZRgFIAEoCRIjChtBZGRyZXNzQWRkaXRpb25hbE5hbWVTb3VyY2UYBiAB",
            "KAkSEwoLQWRkcmVzc0NvZGUYByABKAkSEwoLQWRkcmVzc05hbWUYCCABKAkS",
            "DgoGTnVtYmVyGAkgASgJEg4KBkxldHRlchgKIAEoCRIbChNDYWRhc3RyYWxV",
            "bml0TnVtYmVyGAsgASgJEhoKElByb3BlcnR5VW5pdE51bWJlchgMIAEoCRIT",
            "CgtMZWFzZU51bWJlchgNIAEoCRIRCglTdWJOdW1iZXIYDiABKAkSEwoLQWRk",
            "cmVzc1RleHQYDyABKAkSLwonQWRkcmVzc1RleHRXaXRob3V0QWRkcmVzc0Fk",
            "ZGl0aW9uYWxOYW1lGBAgASgJEhAKCEVwc2dDb2RlGBEgASgJEg0KBU5vcnRo",
            "GBIgASgJEgwKBEVhc3QYEyABKAkSEgoKUG9zdGFsQ29kZRgUIAEoCRISCgpQ",
            "b3N0YWxDaXR5GBUgASgJEhIKClVwZGF0ZURhdGUYFiABKAkSFwoPRGF0YVRh",
            "a2VPdXREYXRlGBcgASgJEhEKCUFkZHJlc3NJZBgYIAEoCRITCgtVdWlkQWRk",
            "cmVzcxgZIAEoCRIQCghBY2Nlc3NJZBgaIAEoCRISCgpVdWlkQWNjZXNzGBsg",
            "ASgJEhMKC0FjY2Vzc05vcnRoGBwgASgJEhMKC0FjY2Vzc1NvdXRoGB0gASgJ",
            "EhYKDlN1bW1lckFjY2Vzc0lkGB4gASgJEhgKEFV1aWRTdW1tZXJBY2Nlc3MY",
            "HyABKAkSGQoRU3VtbWVyQWNjZXNzTm9ydGgYICABKAkSGAoQU3VtbWVyQWNj",
            "ZXNzRWFzdBghIAEoCRIWCg5XaW50ZXJBY2Nlc3NJZBgiIAEoCRIYChBVdWlk",
            "V2ludGVyQWNjZXNzGCMgASgJEhkKEVdpbnRlckFjY2Vzc05vcnRoGCQgASgJ",
            "EhgKEFdpbnRlckFjY2Vzc0Vhc3QYJSABKAlCUgopbm8ubmhuLmFkZHJlc3Mu",
            "Y2FkYXN0cmUucm9hZC5pbXBvcnRGb3JtYXSqAiROby5OaG4uQWRkcmVzcy5D",
            "YWRhc3RyZS5JbXBvcnRGb3JtYXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::No.Nhn.Address.Cadastre.ImportFormat.CadastreRoadAddressImport), global::No.Nhn.Address.Cadastre.ImportFormat.CadastreRoadAddressImport.Parser, new[]{ "LocalId", "MunicipalityNumber", "MunicipalityName", "AddressType", "AddressAdditionalName", "AddressAdditionalNameSource", "AddressCode", "AddressName", "Number", "Letter", "CadastralUnitNumber", "PropertyUnitNumber", "LeaseNumber", "SubNumber", "AddressText", "AddressTextWithoutAddressAdditionalName", "EpsgCode", "North", "East", "PostalCode", "PostalCity", "UpdateDate", "DataTakeOutDate", "AddressId", "UuidAddress", "AccessId", "UuidAccess", "AccessNorth", "AccessSouth", "SummerAccessId", "UuidSummerAccess", "SummerAccessNorth", "SummerAccessEast", "WinterAccessId", "UuidWinterAccess", "WinterAccessNorth", "WinterAccessEast" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CadastreRoadAddressImport : pb::IMessage<CadastreRoadAddressImport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CadastreRoadAddressImport> _parser = new pb::MessageParser<CadastreRoadAddressImport>(() => new CadastreRoadAddressImport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CadastreRoadAddressImport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::No.Nhn.Address.Cadastre.ImportFormat.CadastreRoadAddressImportFormatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CadastreRoadAddressImport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CadastreRoadAddressImport(CadastreRoadAddressImport other) : this() {
      localId_ = other.localId_;
      municipalityNumber_ = other.municipalityNumber_;
      municipalityName_ = other.municipalityName_;
      addressType_ = other.addressType_;
      addressAdditionalName_ = other.addressAdditionalName_;
      addressAdditionalNameSource_ = other.addressAdditionalNameSource_;
      addressCode_ = other.addressCode_;
      addressName_ = other.addressName_;
      number_ = other.number_;
      letter_ = other.letter_;
      cadastralUnitNumber_ = other.cadastralUnitNumber_;
      propertyUnitNumber_ = other.propertyUnitNumber_;
      leaseNumber_ = other.leaseNumber_;
      subNumber_ = other.subNumber_;
      addressText_ = other.addressText_;
      addressTextWithoutAddressAdditionalName_ = other.addressTextWithoutAddressAdditionalName_;
      epsgCode_ = other.epsgCode_;
      north_ = other.north_;
      east_ = other.east_;
      postalCode_ = other.postalCode_;
      postalCity_ = other.postalCity_;
      updateDate_ = other.updateDate_;
      dataTakeOutDate_ = other.dataTakeOutDate_;
      addressId_ = other.addressId_;
      uuidAddress_ = other.uuidAddress_;
      accessId_ = other.accessId_;
      uuidAccess_ = other.uuidAccess_;
      accessNorth_ = other.accessNorth_;
      accessSouth_ = other.accessSouth_;
      summerAccessId_ = other.summerAccessId_;
      uuidSummerAccess_ = other.uuidSummerAccess_;
      summerAccessNorth_ = other.summerAccessNorth_;
      summerAccessEast_ = other.summerAccessEast_;
      winterAccessId_ = other.winterAccessId_;
      uuidWinterAccess_ = other.uuidWinterAccess_;
      winterAccessNorth_ = other.winterAccessNorth_;
      winterAccessEast_ = other.winterAccessEast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CadastreRoadAddressImport Clone() {
      return new CadastreRoadAddressImport(this);
    }

    /// <summary>Field number for the "LocalId" field.</summary>
    public const int LocalIdFieldNumber = 1;
    private string localId_ = "";
    /// <summary>
    /// lokalId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocalId {
      get { return localId_; }
      set {
        localId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MunicipalityNumber" field.</summary>
    public const int MunicipalityNumberFieldNumber = 2;
    private string municipalityNumber_ = "";
    /// <summary>
    /// kommunenummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MunicipalityNumber {
      get { return municipalityNumber_; }
      set {
        municipalityNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MunicipalityName" field.</summary>
    public const int MunicipalityNameFieldNumber = 3;
    private string municipalityName_ = "";
    /// <summary>
    /// kommunenavn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MunicipalityName {
      get { return municipalityName_; }
      set {
        municipalityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressType" field.</summary>
    public const int AddressTypeFieldNumber = 4;
    private string addressType_ = "";
    /// <summary>
    /// adressetype 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressType {
      get { return addressType_; }
      set {
        addressType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressAdditionalName" field.</summary>
    public const int AddressAdditionalNameFieldNumber = 5;
    private string addressAdditionalName_ = "";
    /// <summary>
    /// adressetilleggsnavn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressAdditionalName {
      get { return addressAdditionalName_; }
      set {
        addressAdditionalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressAdditionalNameSource" field.</summary>
    public const int AddressAdditionalNameSourceFieldNumber = 6;
    private string addressAdditionalNameSource_ = "";
    /// <summary>
    /// adressetilleggsnavnKilde 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressAdditionalNameSource {
      get { return addressAdditionalNameSource_; }
      set {
        addressAdditionalNameSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressCode" field.</summary>
    public const int AddressCodeFieldNumber = 7;
    private string addressCode_ = "";
    /// <summary>
    /// adressekode 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressCode {
      get { return addressCode_; }
      set {
        addressCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressName" field.</summary>
    public const int AddressNameFieldNumber = 8;
    private string addressName_ = "";
    /// <summary>
    /// adressenavn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressName {
      get { return addressName_; }
      set {
        addressName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Number" field.</summary>
    public const int NumberFieldNumber = 9;
    private string number_ = "";
    /// <summary>
    /// nummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Letter" field.</summary>
    public const int LetterFieldNumber = 10;
    private string letter_ = "";
    /// <summary>
    /// bokstav 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Letter {
      get { return letter_; }
      set {
        letter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CadastralUnitNumber" field.</summary>
    public const int CadastralUnitNumberFieldNumber = 11;
    private string cadastralUnitNumber_ = "";
    /// <summary>
    /// gardsnummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CadastralUnitNumber {
      get { return cadastralUnitNumber_; }
      set {
        cadastralUnitNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PropertyUnitNumber" field.</summary>
    public const int PropertyUnitNumberFieldNumber = 12;
    private string propertyUnitNumber_ = "";
    /// <summary>
    /// bruksnummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PropertyUnitNumber {
      get { return propertyUnitNumber_; }
      set {
        propertyUnitNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeaseNumber" field.</summary>
    public const int LeaseNumberFieldNumber = 13;
    private string leaseNumber_ = "";
    /// <summary>
    /// festenummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LeaseNumber {
      get { return leaseNumber_; }
      set {
        leaseNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubNumber" field.</summary>
    public const int SubNumberFieldNumber = 14;
    private string subNumber_ = "";
    /// <summary>
    /// undernummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SubNumber {
      get { return subNumber_; }
      set {
        subNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressText" field.</summary>
    public const int AddressTextFieldNumber = 15;
    private string addressText_ = "";
    /// <summary>
    /// adresseTekst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressText {
      get { return addressText_; }
      set {
        addressText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressTextWithoutAddressAdditionalName" field.</summary>
    public const int AddressTextWithoutAddressAdditionalNameFieldNumber = 16;
    private string addressTextWithoutAddressAdditionalName_ = "";
    /// <summary>
    /// adresseTekstUtenAdressetilleggsnavn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressTextWithoutAddressAdditionalName {
      get { return addressTextWithoutAddressAdditionalName_; }
      set {
        addressTextWithoutAddressAdditionalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EpsgCode" field.</summary>
    public const int EpsgCodeFieldNumber = 17;
    private string epsgCode_ = "";
    /// <summary>
    /// EPSG-kode 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EpsgCode {
      get { return epsgCode_; }
      set {
        epsgCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "North" field.</summary>
    public const int NorthFieldNumber = 18;
    private string north_ = "";
    /// <summary>
    /// Nord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string North {
      get { return north_; }
      set {
        north_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "East" field.</summary>
    public const int EastFieldNumber = 19;
    private string east_ = "";
    /// <summary>
    /// Øst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string East {
      get { return east_; }
      set {
        east_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PostalCode" field.</summary>
    public const int PostalCodeFieldNumber = 20;
    private string postalCode_ = "";
    /// <summary>
    /// postnummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostalCode {
      get { return postalCode_; }
      set {
        postalCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PostalCity" field.</summary>
    public const int PostalCityFieldNumber = 21;
    private string postalCity_ = "";
    /// <summary>
    /// poststed 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostalCity {
      get { return postalCity_; }
      set {
        postalCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdateDate" field.</summary>
    public const int UpdateDateFieldNumber = 22;
    private string updateDate_ = "";
    /// <summary>
    /// oppdateringsdato 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpdateDate {
      get { return updateDate_; }
      set {
        updateDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataTakeOutDate" field.</summary>
    public const int DataTakeOutDateFieldNumber = 23;
    private string dataTakeOutDate_ = "";
    /// <summary>
    /// datauttaksdato 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DataTakeOutDate {
      get { return dataTakeOutDate_; }
      set {
        dataTakeOutDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressId" field.</summary>
    public const int AddressIdFieldNumber = 24;
    private string addressId_ = "";
    /// <summary>
    /// adresseId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressId {
      get { return addressId_; }
      set {
        addressId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UuidAddress" field.</summary>
    public const int UuidAddressFieldNumber = 25;
    private string uuidAddress_ = "";
    /// <summary>
    /// uuidAdresse 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UuidAddress {
      get { return uuidAddress_; }
      set {
        uuidAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessId" field.</summary>
    public const int AccessIdFieldNumber = 26;
    private string accessId_ = "";
    /// <summary>
    /// atkomstId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessId {
      get { return accessId_; }
      set {
        accessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UuidAccess" field.</summary>
    public const int UuidAccessFieldNumber = 27;
    private string uuidAccess_ = "";
    /// <summary>
    /// uuidAtkomst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UuidAccess {
      get { return uuidAccess_; }
      set {
        uuidAccess_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessNorth" field.</summary>
    public const int AccessNorthFieldNumber = 28;
    private string accessNorth_ = "";
    /// <summary>
    /// atkomstNord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessNorth {
      get { return accessNorth_; }
      set {
        accessNorth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessSouth" field.</summary>
    public const int AccessSouthFieldNumber = 29;
    private string accessSouth_ = "";
    /// <summary>
    /// atkomstØst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessSouth {
      get { return accessSouth_; }
      set {
        accessSouth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SummerAccessId" field.</summary>
    public const int SummerAccessIdFieldNumber = 30;
    private string summerAccessId_ = "";
    /// <summary>
    /// sommeratkomstId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SummerAccessId {
      get { return summerAccessId_; }
      set {
        summerAccessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UuidSummerAccess" field.</summary>
    public const int UuidSummerAccessFieldNumber = 31;
    private string uuidSummerAccess_ = "";
    /// <summary>
    /// uuidSommeratkomst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UuidSummerAccess {
      get { return uuidSummerAccess_; }
      set {
        uuidSummerAccess_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SummerAccessNorth" field.</summary>
    public const int SummerAccessNorthFieldNumber = 32;
    private string summerAccessNorth_ = "";
    /// <summary>
    /// sommeratkomstNord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SummerAccessNorth {
      get { return summerAccessNorth_; }
      set {
        summerAccessNorth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SummerAccessEast" field.</summary>
    public const int SummerAccessEastFieldNumber = 33;
    private string summerAccessEast_ = "";
    /// <summary>
    /// sommeratkomstØst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SummerAccessEast {
      get { return summerAccessEast_; }
      set {
        summerAccessEast_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WinterAccessId" field.</summary>
    public const int WinterAccessIdFieldNumber = 34;
    private string winterAccessId_ = "";
    /// <summary>
    /// vinteratkomstId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WinterAccessId {
      get { return winterAccessId_; }
      set {
        winterAccessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UuidWinterAccess" field.</summary>
    public const int UuidWinterAccessFieldNumber = 35;
    private string uuidWinterAccess_ = "";
    /// <summary>
    /// uuidVinteratkomst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UuidWinterAccess {
      get { return uuidWinterAccess_; }
      set {
        uuidWinterAccess_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WinterAccessNorth" field.</summary>
    public const int WinterAccessNorthFieldNumber = 36;
    private string winterAccessNorth_ = "";
    /// <summary>
    /// vinteratkomstNord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WinterAccessNorth {
      get { return winterAccessNorth_; }
      set {
        winterAccessNorth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WinterAccessEast" field.</summary>
    public const int WinterAccessEastFieldNumber = 37;
    private string winterAccessEast_ = "";
    /// <summary>
    /// vinteratkomstØst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WinterAccessEast {
      get { return winterAccessEast_; }
      set {
        winterAccessEast_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CadastreRoadAddressImport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CadastreRoadAddressImport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalId != other.LocalId) return false;
      if (MunicipalityNumber != other.MunicipalityNumber) return false;
      if (MunicipalityName != other.MunicipalityName) return false;
      if (AddressType != other.AddressType) return false;
      if (AddressAdditionalName != other.AddressAdditionalName) return false;
      if (AddressAdditionalNameSource != other.AddressAdditionalNameSource) return false;
      if (AddressCode != other.AddressCode) return false;
      if (AddressName != other.AddressName) return false;
      if (Number != other.Number) return false;
      if (Letter != other.Letter) return false;
      if (CadastralUnitNumber != other.CadastralUnitNumber) return false;
      if (PropertyUnitNumber != other.PropertyUnitNumber) return false;
      if (LeaseNumber != other.LeaseNumber) return false;
      if (SubNumber != other.SubNumber) return false;
      if (AddressText != other.AddressText) return false;
      if (AddressTextWithoutAddressAdditionalName != other.AddressTextWithoutAddressAdditionalName) return false;
      if (EpsgCode != other.EpsgCode) return false;
      if (North != other.North) return false;
      if (East != other.East) return false;
      if (PostalCode != other.PostalCode) return false;
      if (PostalCity != other.PostalCity) return false;
      if (UpdateDate != other.UpdateDate) return false;
      if (DataTakeOutDate != other.DataTakeOutDate) return false;
      if (AddressId != other.AddressId) return false;
      if (UuidAddress != other.UuidAddress) return false;
      if (AccessId != other.AccessId) return false;
      if (UuidAccess != other.UuidAccess) return false;
      if (AccessNorth != other.AccessNorth) return false;
      if (AccessSouth != other.AccessSouth) return false;
      if (SummerAccessId != other.SummerAccessId) return false;
      if (UuidSummerAccess != other.UuidSummerAccess) return false;
      if (SummerAccessNorth != other.SummerAccessNorth) return false;
      if (SummerAccessEast != other.SummerAccessEast) return false;
      if (WinterAccessId != other.WinterAccessId) return false;
      if (UuidWinterAccess != other.UuidWinterAccess) return false;
      if (WinterAccessNorth != other.WinterAccessNorth) return false;
      if (WinterAccessEast != other.WinterAccessEast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalId.Length != 0) hash ^= LocalId.GetHashCode();
      if (MunicipalityNumber.Length != 0) hash ^= MunicipalityNumber.GetHashCode();
      if (MunicipalityName.Length != 0) hash ^= MunicipalityName.GetHashCode();
      if (AddressType.Length != 0) hash ^= AddressType.GetHashCode();
      if (AddressAdditionalName.Length != 0) hash ^= AddressAdditionalName.GetHashCode();
      if (AddressAdditionalNameSource.Length != 0) hash ^= AddressAdditionalNameSource.GetHashCode();
      if (AddressCode.Length != 0) hash ^= AddressCode.GetHashCode();
      if (AddressName.Length != 0) hash ^= AddressName.GetHashCode();
      if (Number.Length != 0) hash ^= Number.GetHashCode();
      if (Letter.Length != 0) hash ^= Letter.GetHashCode();
      if (CadastralUnitNumber.Length != 0) hash ^= CadastralUnitNumber.GetHashCode();
      if (PropertyUnitNumber.Length != 0) hash ^= PropertyUnitNumber.GetHashCode();
      if (LeaseNumber.Length != 0) hash ^= LeaseNumber.GetHashCode();
      if (SubNumber.Length != 0) hash ^= SubNumber.GetHashCode();
      if (AddressText.Length != 0) hash ^= AddressText.GetHashCode();
      if (AddressTextWithoutAddressAdditionalName.Length != 0) hash ^= AddressTextWithoutAddressAdditionalName.GetHashCode();
      if (EpsgCode.Length != 0) hash ^= EpsgCode.GetHashCode();
      if (North.Length != 0) hash ^= North.GetHashCode();
      if (East.Length != 0) hash ^= East.GetHashCode();
      if (PostalCode.Length != 0) hash ^= PostalCode.GetHashCode();
      if (PostalCity.Length != 0) hash ^= PostalCity.GetHashCode();
      if (UpdateDate.Length != 0) hash ^= UpdateDate.GetHashCode();
      if (DataTakeOutDate.Length != 0) hash ^= DataTakeOutDate.GetHashCode();
      if (AddressId.Length != 0) hash ^= AddressId.GetHashCode();
      if (UuidAddress.Length != 0) hash ^= UuidAddress.GetHashCode();
      if (AccessId.Length != 0) hash ^= AccessId.GetHashCode();
      if (UuidAccess.Length != 0) hash ^= UuidAccess.GetHashCode();
      if (AccessNorth.Length != 0) hash ^= AccessNorth.GetHashCode();
      if (AccessSouth.Length != 0) hash ^= AccessSouth.GetHashCode();
      if (SummerAccessId.Length != 0) hash ^= SummerAccessId.GetHashCode();
      if (UuidSummerAccess.Length != 0) hash ^= UuidSummerAccess.GetHashCode();
      if (SummerAccessNorth.Length != 0) hash ^= SummerAccessNorth.GetHashCode();
      if (SummerAccessEast.Length != 0) hash ^= SummerAccessEast.GetHashCode();
      if (WinterAccessId.Length != 0) hash ^= WinterAccessId.GetHashCode();
      if (UuidWinterAccess.Length != 0) hash ^= UuidWinterAccess.GetHashCode();
      if (WinterAccessNorth.Length != 0) hash ^= WinterAccessNorth.GetHashCode();
      if (WinterAccessEast.Length != 0) hash ^= WinterAccessEast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LocalId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalId);
      }
      if (MunicipalityNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MunicipalityNumber);
      }
      if (MunicipalityName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MunicipalityName);
      }
      if (AddressType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddressType);
      }
      if (AddressAdditionalName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AddressAdditionalName);
      }
      if (AddressAdditionalNameSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AddressAdditionalNameSource);
      }
      if (AddressCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AddressCode);
      }
      if (AddressName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AddressName);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Number);
      }
      if (Letter.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Letter);
      }
      if (CadastralUnitNumber.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CadastralUnitNumber);
      }
      if (PropertyUnitNumber.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PropertyUnitNumber);
      }
      if (LeaseNumber.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LeaseNumber);
      }
      if (SubNumber.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SubNumber);
      }
      if (AddressText.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AddressText);
      }
      if (AddressTextWithoutAddressAdditionalName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AddressTextWithoutAddressAdditionalName);
      }
      if (EpsgCode.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(EpsgCode);
      }
      if (North.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(North);
      }
      if (East.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(East);
      }
      if (PostalCode.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PostalCode);
      }
      if (PostalCity.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(PostalCity);
      }
      if (UpdateDate.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(UpdateDate);
      }
      if (DataTakeOutDate.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(DataTakeOutDate);
      }
      if (AddressId.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(AddressId);
      }
      if (UuidAddress.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(UuidAddress);
      }
      if (AccessId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(AccessId);
      }
      if (UuidAccess.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(UuidAccess);
      }
      if (AccessNorth.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AccessNorth);
      }
      if (AccessSouth.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(AccessSouth);
      }
      if (SummerAccessId.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SummerAccessId);
      }
      if (UuidSummerAccess.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(UuidSummerAccess);
      }
      if (SummerAccessNorth.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SummerAccessNorth);
      }
      if (SummerAccessEast.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(SummerAccessEast);
      }
      if (WinterAccessId.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WinterAccessId);
      }
      if (UuidWinterAccess.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(UuidWinterAccess);
      }
      if (WinterAccessNorth.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WinterAccessNorth);
      }
      if (WinterAccessEast.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WinterAccessEast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LocalId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalId);
      }
      if (MunicipalityNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MunicipalityNumber);
      }
      if (MunicipalityName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MunicipalityName);
      }
      if (AddressType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddressType);
      }
      if (AddressAdditionalName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AddressAdditionalName);
      }
      if (AddressAdditionalNameSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AddressAdditionalNameSource);
      }
      if (AddressCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AddressCode);
      }
      if (AddressName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AddressName);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Number);
      }
      if (Letter.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Letter);
      }
      if (CadastralUnitNumber.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CadastralUnitNumber);
      }
      if (PropertyUnitNumber.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PropertyUnitNumber);
      }
      if (LeaseNumber.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LeaseNumber);
      }
      if (SubNumber.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SubNumber);
      }
      if (AddressText.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AddressText);
      }
      if (AddressTextWithoutAddressAdditionalName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AddressTextWithoutAddressAdditionalName);
      }
      if (EpsgCode.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(EpsgCode);
      }
      if (North.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(North);
      }
      if (East.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(East);
      }
      if (PostalCode.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PostalCode);
      }
      if (PostalCity.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(PostalCity);
      }
      if (UpdateDate.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(UpdateDate);
      }
      if (DataTakeOutDate.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(DataTakeOutDate);
      }
      if (AddressId.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(AddressId);
      }
      if (UuidAddress.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(UuidAddress);
      }
      if (AccessId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(AccessId);
      }
      if (UuidAccess.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(UuidAccess);
      }
      if (AccessNorth.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AccessNorth);
      }
      if (AccessSouth.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(AccessSouth);
      }
      if (SummerAccessId.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SummerAccessId);
      }
      if (UuidSummerAccess.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(UuidSummerAccess);
      }
      if (SummerAccessNorth.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SummerAccessNorth);
      }
      if (SummerAccessEast.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(SummerAccessEast);
      }
      if (WinterAccessId.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(WinterAccessId);
      }
      if (UuidWinterAccess.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(UuidWinterAccess);
      }
      if (WinterAccessNorth.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(WinterAccessNorth);
      }
      if (WinterAccessEast.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(WinterAccessEast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LocalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalId);
      }
      if (MunicipalityNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MunicipalityNumber);
      }
      if (MunicipalityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MunicipalityName);
      }
      if (AddressType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressType);
      }
      if (AddressAdditionalName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressAdditionalName);
      }
      if (AddressAdditionalNameSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressAdditionalNameSource);
      }
      if (AddressCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressCode);
      }
      if (AddressName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressName);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (Letter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Letter);
      }
      if (CadastralUnitNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CadastralUnitNumber);
      }
      if (PropertyUnitNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyUnitNumber);
      }
      if (LeaseNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaseNumber);
      }
      if (SubNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubNumber);
      }
      if (AddressText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressText);
      }
      if (AddressTextWithoutAddressAdditionalName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddressTextWithoutAddressAdditionalName);
      }
      if (EpsgCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EpsgCode);
      }
      if (North.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(North);
      }
      if (East.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(East);
      }
      if (PostalCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PostalCode);
      }
      if (PostalCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PostalCity);
      }
      if (UpdateDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateDate);
      }
      if (DataTakeOutDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DataTakeOutDate);
      }
      if (AddressId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddressId);
      }
      if (UuidAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UuidAddress);
      }
      if (AccessId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessId);
      }
      if (UuidAccess.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UuidAccess);
      }
      if (AccessNorth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessNorth);
      }
      if (AccessSouth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessSouth);
      }
      if (SummerAccessId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SummerAccessId);
      }
      if (UuidSummerAccess.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UuidSummerAccess);
      }
      if (SummerAccessNorth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SummerAccessNorth);
      }
      if (SummerAccessEast.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SummerAccessEast);
      }
      if (WinterAccessId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WinterAccessId);
      }
      if (UuidWinterAccess.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UuidWinterAccess);
      }
      if (WinterAccessNorth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WinterAccessNorth);
      }
      if (WinterAccessEast.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WinterAccessEast);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CadastreRoadAddressImport other) {
      if (other == null) {
        return;
      }
      if (other.LocalId.Length != 0) {
        LocalId = other.LocalId;
      }
      if (other.MunicipalityNumber.Length != 0) {
        MunicipalityNumber = other.MunicipalityNumber;
      }
      if (other.MunicipalityName.Length != 0) {
        MunicipalityName = other.MunicipalityName;
      }
      if (other.AddressType.Length != 0) {
        AddressType = other.AddressType;
      }
      if (other.AddressAdditionalName.Length != 0) {
        AddressAdditionalName = other.AddressAdditionalName;
      }
      if (other.AddressAdditionalNameSource.Length != 0) {
        AddressAdditionalNameSource = other.AddressAdditionalNameSource;
      }
      if (other.AddressCode.Length != 0) {
        AddressCode = other.AddressCode;
      }
      if (other.AddressName.Length != 0) {
        AddressName = other.AddressName;
      }
      if (other.Number.Length != 0) {
        Number = other.Number;
      }
      if (other.Letter.Length != 0) {
        Letter = other.Letter;
      }
      if (other.CadastralUnitNumber.Length != 0) {
        CadastralUnitNumber = other.CadastralUnitNumber;
      }
      if (other.PropertyUnitNumber.Length != 0) {
        PropertyUnitNumber = other.PropertyUnitNumber;
      }
      if (other.LeaseNumber.Length != 0) {
        LeaseNumber = other.LeaseNumber;
      }
      if (other.SubNumber.Length != 0) {
        SubNumber = other.SubNumber;
      }
      if (other.AddressText.Length != 0) {
        AddressText = other.AddressText;
      }
      if (other.AddressTextWithoutAddressAdditionalName.Length != 0) {
        AddressTextWithoutAddressAdditionalName = other.AddressTextWithoutAddressAdditionalName;
      }
      if (other.EpsgCode.Length != 0) {
        EpsgCode = other.EpsgCode;
      }
      if (other.North.Length != 0) {
        North = other.North;
      }
      if (other.East.Length != 0) {
        East = other.East;
      }
      if (other.PostalCode.Length != 0) {
        PostalCode = other.PostalCode;
      }
      if (other.PostalCity.Length != 0) {
        PostalCity = other.PostalCity;
      }
      if (other.UpdateDate.Length != 0) {
        UpdateDate = other.UpdateDate;
      }
      if (other.DataTakeOutDate.Length != 0) {
        DataTakeOutDate = other.DataTakeOutDate;
      }
      if (other.AddressId.Length != 0) {
        AddressId = other.AddressId;
      }
      if (other.UuidAddress.Length != 0) {
        UuidAddress = other.UuidAddress;
      }
      if (other.AccessId.Length != 0) {
        AccessId = other.AccessId;
      }
      if (other.UuidAccess.Length != 0) {
        UuidAccess = other.UuidAccess;
      }
      if (other.AccessNorth.Length != 0) {
        AccessNorth = other.AccessNorth;
      }
      if (other.AccessSouth.Length != 0) {
        AccessSouth = other.AccessSouth;
      }
      if (other.SummerAccessId.Length != 0) {
        SummerAccessId = other.SummerAccessId;
      }
      if (other.UuidSummerAccess.Length != 0) {
        UuidSummerAccess = other.UuidSummerAccess;
      }
      if (other.SummerAccessNorth.Length != 0) {
        SummerAccessNorth = other.SummerAccessNorth;
      }
      if (other.SummerAccessEast.Length != 0) {
        SummerAccessEast = other.SummerAccessEast;
      }
      if (other.WinterAccessId.Length != 0) {
        WinterAccessId = other.WinterAccessId;
      }
      if (other.UuidWinterAccess.Length != 0) {
        UuidWinterAccess = other.UuidWinterAccess;
      }
      if (other.WinterAccessNorth.Length != 0) {
        WinterAccessNorth = other.WinterAccessNorth;
      }
      if (other.WinterAccessEast.Length != 0) {
        WinterAccessEast = other.WinterAccessEast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocalId = input.ReadString();
            break;
          }
          case 18: {
            MunicipalityNumber = input.ReadString();
            break;
          }
          case 26: {
            MunicipalityName = input.ReadString();
            break;
          }
          case 34: {
            AddressType = input.ReadString();
            break;
          }
          case 42: {
            AddressAdditionalName = input.ReadString();
            break;
          }
          case 50: {
            AddressAdditionalNameSource = input.ReadString();
            break;
          }
          case 58: {
            AddressCode = input.ReadString();
            break;
          }
          case 66: {
            AddressName = input.ReadString();
            break;
          }
          case 74: {
            Number = input.ReadString();
            break;
          }
          case 82: {
            Letter = input.ReadString();
            break;
          }
          case 90: {
            CadastralUnitNumber = input.ReadString();
            break;
          }
          case 98: {
            PropertyUnitNumber = input.ReadString();
            break;
          }
          case 106: {
            LeaseNumber = input.ReadString();
            break;
          }
          case 114: {
            SubNumber = input.ReadString();
            break;
          }
          case 122: {
            AddressText = input.ReadString();
            break;
          }
          case 130: {
            AddressTextWithoutAddressAdditionalName = input.ReadString();
            break;
          }
          case 138: {
            EpsgCode = input.ReadString();
            break;
          }
          case 146: {
            North = input.ReadString();
            break;
          }
          case 154: {
            East = input.ReadString();
            break;
          }
          case 162: {
            PostalCode = input.ReadString();
            break;
          }
          case 170: {
            PostalCity = input.ReadString();
            break;
          }
          case 178: {
            UpdateDate = input.ReadString();
            break;
          }
          case 186: {
            DataTakeOutDate = input.ReadString();
            break;
          }
          case 194: {
            AddressId = input.ReadString();
            break;
          }
          case 202: {
            UuidAddress = input.ReadString();
            break;
          }
          case 210: {
            AccessId = input.ReadString();
            break;
          }
          case 218: {
            UuidAccess = input.ReadString();
            break;
          }
          case 226: {
            AccessNorth = input.ReadString();
            break;
          }
          case 234: {
            AccessSouth = input.ReadString();
            break;
          }
          case 242: {
            SummerAccessId = input.ReadString();
            break;
          }
          case 250: {
            UuidSummerAccess = input.ReadString();
            break;
          }
          case 258: {
            SummerAccessNorth = input.ReadString();
            break;
          }
          case 266: {
            SummerAccessEast = input.ReadString();
            break;
          }
          case 274: {
            WinterAccessId = input.ReadString();
            break;
          }
          case 282: {
            UuidWinterAccess = input.ReadString();
            break;
          }
          case 290: {
            WinterAccessNorth = input.ReadString();
            break;
          }
          case 298: {
            WinterAccessEast = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LocalId = input.ReadString();
            break;
          }
          case 18: {
            MunicipalityNumber = input.ReadString();
            break;
          }
          case 26: {
            MunicipalityName = input.ReadString();
            break;
          }
          case 34: {
            AddressType = input.ReadString();
            break;
          }
          case 42: {
            AddressAdditionalName = input.ReadString();
            break;
          }
          case 50: {
            AddressAdditionalNameSource = input.ReadString();
            break;
          }
          case 58: {
            AddressCode = input.ReadString();
            break;
          }
          case 66: {
            AddressName = input.ReadString();
            break;
          }
          case 74: {
            Number = input.ReadString();
            break;
          }
          case 82: {
            Letter = input.ReadString();
            break;
          }
          case 90: {
            CadastralUnitNumber = input.ReadString();
            break;
          }
          case 98: {
            PropertyUnitNumber = input.ReadString();
            break;
          }
          case 106: {
            LeaseNumber = input.ReadString();
            break;
          }
          case 114: {
            SubNumber = input.ReadString();
            break;
          }
          case 122: {
            AddressText = input.ReadString();
            break;
          }
          case 130: {
            AddressTextWithoutAddressAdditionalName = input.ReadString();
            break;
          }
          case 138: {
            EpsgCode = input.ReadString();
            break;
          }
          case 146: {
            North = input.ReadString();
            break;
          }
          case 154: {
            East = input.ReadString();
            break;
          }
          case 162: {
            PostalCode = input.ReadString();
            break;
          }
          case 170: {
            PostalCity = input.ReadString();
            break;
          }
          case 178: {
            UpdateDate = input.ReadString();
            break;
          }
          case 186: {
            DataTakeOutDate = input.ReadString();
            break;
          }
          case 194: {
            AddressId = input.ReadString();
            break;
          }
          case 202: {
            UuidAddress = input.ReadString();
            break;
          }
          case 210: {
            AccessId = input.ReadString();
            break;
          }
          case 218: {
            UuidAccess = input.ReadString();
            break;
          }
          case 226: {
            AccessNorth = input.ReadString();
            break;
          }
          case 234: {
            AccessSouth = input.ReadString();
            break;
          }
          case 242: {
            SummerAccessId = input.ReadString();
            break;
          }
          case 250: {
            UuidSummerAccess = input.ReadString();
            break;
          }
          case 258: {
            SummerAccessNorth = input.ReadString();
            break;
          }
          case 266: {
            SummerAccessEast = input.ReadString();
            break;
          }
          case 274: {
            WinterAccessId = input.ReadString();
            break;
          }
          case 282: {
            UuidWinterAccess = input.ReadString();
            break;
          }
          case 290: {
            WinterAccessNorth = input.ReadString();
            break;
          }
          case 298: {
            WinterAccessEast = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
