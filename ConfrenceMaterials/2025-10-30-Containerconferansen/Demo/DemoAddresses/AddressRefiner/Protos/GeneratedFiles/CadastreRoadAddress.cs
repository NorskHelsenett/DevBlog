// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CadastreRoadAddress.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace No.Nhn.Address.Cadastre.Road {

  /// <summary>Holder for reflection information generated from CadastreRoadAddress.proto</summary>
  public static partial class CadastreRoadAddressReflection {

    #region Descriptor
    /// <summary>File descriptor for CadastreRoadAddress.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CadastreRoadAddressReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlDYWRhc3RyZVJvYWRBZGRyZXNzLnByb3RvEhxuby5uaG4uYWRkcmVzcy5j",
            "YWRhc3RyZS5yb2FkIqEGChNDYWRhc3RyZVJvYWRBZGRyZXNzEhEKCUFkZHJl",
            "c3NJZBgBIAEoCRITCgtBZGRyZXNzVXVpZBgCIAEoCRITCgtBZGRyZXNzQ29k",
            "ZRgDIAEoCRITCgtBZGRyZXNzVHlwZRgEIAEoCRISCgpVcGRhdGVEYXRlGAUg",
            "ASgJEhoKEk11bmljaXBhbGl0eU51bWJlchgGIAEoCRIYChBNdW5pY2lwYWxp",
            "dHlOYW1lGAcgASgJEhsKE0NhZGFzdHJhbFVuaXROdW1iZXIYCCABKAkSGgoS",
            "UHJvcGVydHlVbml0TnVtYmVyGAkgASgJEhMKC0xlYXNlTnVtYmVyGAogASgJ",
            "EhEKCVN1Yk51bWJlchgLIAEoCRIdChVBZGRyZXNzQWRkaXRpb25hbE5hbWUY",
            "DCABKAkSEwoLQWRkcmVzc05hbWUYDSABKAkSDgoGTnVtYmVyGA4gASgJEg4K",
            "BkxldHRlchgPIAEoCRITCgtBZGRyZXNzVGV4dBgQIAEoCRIvCidBZGRyZXNz",
            "VGV4dFdpdGhvdXRBZGRyZXNzQWRkaXRpb25hbE5hbWUYESABKAkSEgoKUG9z",
            "dGFsQ29kZRgSIAEoCRISCgpQb3N0YWxDaXR5GBMgASgJEhAKCEVwc2dDb2Rl",
            "GBQgASgJEg0KBU5vcnRoGBUgASgJEgwKBEVhc3QYFiABKAkSEAoIQWNjZXNz",
            "SWQYFyABKAkSEgoKQWNjZXNzVXVpZBgYIAEoCRITCgtBY2Nlc3NOb3J0aBgZ",
            "IAEoCRITCgtBY2Nlc3NTb3V0aBgaIAEoCRIWCg5BY2Nlc3NTdW1tZXJJZBgb",
            "IAEoCRIYChBBY2Nlc3NTdW1tZXJVdWlkGBwgASgJEhkKEUFjY2Vzc1N1bW1l",
            "ck5vcnRoGB0gASgJEhgKEEFjY2Vzc1N1bW1lckVhc3QYHiABKAkSFgoOQWNj",
            "ZXNzV2ludGVySWQYHyABKAkSGAoQQWNjZXNzV2ludGVyVXVpZBggIAEoCRIZ",
            "ChFBY2Nlc3NXaW50ZXJOb3J0aBghIAEoCRIYChBBY2Nlc3NXaW50ZXJFYXN0",
            "GCIgASgJQj0KHG5vLm5obi5hZGRyZXNzLmNhZGFzdHJlLnJvYWSqAhxOby5O",
            "aG4uQWRkcmVzcy5DYWRhc3RyZS5Sb2FkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::No.Nhn.Address.Cadastre.Road.CadastreRoadAddress), global::No.Nhn.Address.Cadastre.Road.CadastreRoadAddress.Parser, new[]{ "AddressId", "AddressUuid", "AddressCode", "AddressType", "UpdateDate", "MunicipalityNumber", "MunicipalityName", "CadastralUnitNumber", "PropertyUnitNumber", "LeaseNumber", "SubNumber", "AddressAdditionalName", "AddressName", "Number", "Letter", "AddressText", "AddressTextWithoutAddressAdditionalName", "PostalCode", "PostalCity", "EpsgCode", "North", "East", "AccessId", "AccessUuid", "AccessNorth", "AccessSouth", "AccessSummerId", "AccessSummerUuid", "AccessSummerNorth", "AccessSummerEast", "AccessWinterId", "AccessWinterUuid", "AccessWinterNorth", "AccessWinterEast" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CadastreRoadAddress : pb::IMessage<CadastreRoadAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CadastreRoadAddress> _parser = new pb::MessageParser<CadastreRoadAddress>(() => new CadastreRoadAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CadastreRoadAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::No.Nhn.Address.Cadastre.Road.CadastreRoadAddressReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CadastreRoadAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CadastreRoadAddress(CadastreRoadAddress other) : this() {
      addressId_ = other.addressId_;
      addressUuid_ = other.addressUuid_;
      addressCode_ = other.addressCode_;
      addressType_ = other.addressType_;
      updateDate_ = other.updateDate_;
      municipalityNumber_ = other.municipalityNumber_;
      municipalityName_ = other.municipalityName_;
      cadastralUnitNumber_ = other.cadastralUnitNumber_;
      propertyUnitNumber_ = other.propertyUnitNumber_;
      leaseNumber_ = other.leaseNumber_;
      subNumber_ = other.subNumber_;
      addressAdditionalName_ = other.addressAdditionalName_;
      addressName_ = other.addressName_;
      number_ = other.number_;
      letter_ = other.letter_;
      addressText_ = other.addressText_;
      addressTextWithoutAddressAdditionalName_ = other.addressTextWithoutAddressAdditionalName_;
      postalCode_ = other.postalCode_;
      postalCity_ = other.postalCity_;
      epsgCode_ = other.epsgCode_;
      north_ = other.north_;
      east_ = other.east_;
      accessId_ = other.accessId_;
      accessUuid_ = other.accessUuid_;
      accessNorth_ = other.accessNorth_;
      accessSouth_ = other.accessSouth_;
      accessSummerId_ = other.accessSummerId_;
      accessSummerUuid_ = other.accessSummerUuid_;
      accessSummerNorth_ = other.accessSummerNorth_;
      accessSummerEast_ = other.accessSummerEast_;
      accessWinterId_ = other.accessWinterId_;
      accessWinterUuid_ = other.accessWinterUuid_;
      accessWinterNorth_ = other.accessWinterNorth_;
      accessWinterEast_ = other.accessWinterEast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CadastreRoadAddress Clone() {
      return new CadastreRoadAddress(this);
    }

    /// <summary>Field number for the "AddressId" field.</summary>
    public const int AddressIdFieldNumber = 1;
    private string addressId_ = "";
    /// <summary>
    /// adresseId = lokalId 1:1 uuidAdresse 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressId {
      get { return addressId_; }
      set {
        addressId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressUuid" field.</summary>
    public const int AddressUuidFieldNumber = 2;
    private string addressUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressUuid {
      get { return addressUuid_; }
      set {
        addressUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressCode" field.</summary>
    public const int AddressCodeFieldNumber = 3;
    private string addressCode_ = "";
    /// <summary>
    /// adressekode (e.g. "1036", "1244") 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressCode {
      get { return addressCode_; }
      set {
        addressCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressType" field.</summary>
    public const int AddressTypeFieldNumber = 4;
    private string addressType_ = "";
    /// <summary>
    /// adressetype (e.g. "vegadresse", "matrikkeladresse")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressType {
      get { return addressType_; }
      set {
        addressType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdateDate" field.</summary>
    public const int UpdateDateFieldNumber = 5;
    private string updateDate_ = "";
    /// <summary>
    /// oppdateringsdato 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpdateDate {
      get { return updateDate_; }
      set {
        updateDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MunicipalityNumber" field.</summary>
    public const int MunicipalityNumberFieldNumber = 6;
    private string municipalityNumber_ = "";
    /// <summary>
    /// kommunenummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MunicipalityNumber {
      get { return municipalityNumber_; }
      set {
        municipalityNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MunicipalityName" field.</summary>
    public const int MunicipalityNameFieldNumber = 7;
    private string municipalityName_ = "";
    /// <summary>
    /// kommunenavn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MunicipalityName {
      get { return municipalityName_; }
      set {
        municipalityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CadastralUnitNumber" field.</summary>
    public const int CadastralUnitNumberFieldNumber = 8;
    private string cadastralUnitNumber_ = "";
    /// <summary>
    /// gardsnummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CadastralUnitNumber {
      get { return cadastralUnitNumber_; }
      set {
        cadastralUnitNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PropertyUnitNumber" field.</summary>
    public const int PropertyUnitNumberFieldNumber = 9;
    private string propertyUnitNumber_ = "";
    /// <summary>
    /// bruksnummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PropertyUnitNumber {
      get { return propertyUnitNumber_; }
      set {
        propertyUnitNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeaseNumber" field.</summary>
    public const int LeaseNumberFieldNumber = 10;
    private string leaseNumber_ = "";
    /// <summary>
    /// festenummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LeaseNumber {
      get { return leaseNumber_; }
      set {
        leaseNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubNumber" field.</summary>
    public const int SubNumberFieldNumber = 11;
    private string subNumber_ = "";
    /// <summary>
    /// undernummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SubNumber {
      get { return subNumber_; }
      set {
        subNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressAdditionalName" field.</summary>
    public const int AddressAdditionalNameFieldNumber = 12;
    private string addressAdditionalName_ = "";
    /// <summary>
    /// adressetilleggsnavn (stedsnavn, e.g. "Smånipevegen", "Hytte Nr. 5-248" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressAdditionalName {
      get { return addressAdditionalName_; }
      set {
        addressAdditionalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressName" field.</summary>
    public const int AddressNameFieldNumber = 13;
    private string addressName_ = "";
    /// <summary>
    /// adressenavn (e.g. "Fjordalléen" ) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressName {
      get { return addressName_; }
      set {
        addressName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Number" field.</summary>
    public const int NumberFieldNumber = 14;
    private string number_ = "";
    /// <summary>
    /// nummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Letter" field.</summary>
    public const int LetterFieldNumber = 15;
    private string letter_ = "";
    /// <summary>
    /// bokstav 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Letter {
      get { return letter_; }
      set {
        letter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressText" field.</summary>
    public const int AddressTextFieldNumber = 16;
    private string addressText_ = "";
    /// <summary>
    /// adresseTekst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressText {
      get { return addressText_; }
      set {
        addressText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressTextWithoutAddressAdditionalName" field.</summary>
    public const int AddressTextWithoutAddressAdditionalNameFieldNumber = 17;
    private string addressTextWithoutAddressAdditionalName_ = "";
    /// <summary>
    /// adresseTekstUtenAdressetilleggsnavn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressTextWithoutAddressAdditionalName {
      get { return addressTextWithoutAddressAdditionalName_; }
      set {
        addressTextWithoutAddressAdditionalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PostalCode" field.</summary>
    public const int PostalCodeFieldNumber = 18;
    private string postalCode_ = "";
    /// <summary>
    /// postnummer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostalCode {
      get { return postalCode_; }
      set {
        postalCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PostalCity" field.</summary>
    public const int PostalCityFieldNumber = 19;
    private string postalCity_ = "";
    /// <summary>
    /// poststed 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostalCity {
      get { return postalCity_; }
      set {
        postalCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EpsgCode" field.</summary>
    public const int EpsgCodeFieldNumber = 20;
    private string epsgCode_ = "";
    /// <summary>
    /// EPSG-kode 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EpsgCode {
      get { return epsgCode_; }
      set {
        epsgCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "North" field.</summary>
    public const int NorthFieldNumber = 21;
    private string north_ = "";
    /// <summary>
    /// Nord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string North {
      get { return north_; }
      set {
        north_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "East" field.</summary>
    public const int EastFieldNumber = 22;
    private string east_ = "";
    /// <summary>
    /// Øst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string East {
      get { return east_; }
      set {
        east_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessId" field.</summary>
    public const int AccessIdFieldNumber = 23;
    private string accessId_ = "";
    /// <summary>
    /// atkomstId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessId {
      get { return accessId_; }
      set {
        accessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessUuid" field.</summary>
    public const int AccessUuidFieldNumber = 24;
    private string accessUuid_ = "";
    /// <summary>
    /// uuidAtkomst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessUuid {
      get { return accessUuid_; }
      set {
        accessUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessNorth" field.</summary>
    public const int AccessNorthFieldNumber = 25;
    private string accessNorth_ = "";
    /// <summary>
    /// atkomstNord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessNorth {
      get { return accessNorth_; }
      set {
        accessNorth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessSouth" field.</summary>
    public const int AccessSouthFieldNumber = 26;
    private string accessSouth_ = "";
    /// <summary>
    /// atkomstØst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessSouth {
      get { return accessSouth_; }
      set {
        accessSouth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessSummerId" field.</summary>
    public const int AccessSummerIdFieldNumber = 27;
    private string accessSummerId_ = "";
    /// <summary>
    /// sommeratkomstId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessSummerId {
      get { return accessSummerId_; }
      set {
        accessSummerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessSummerUuid" field.</summary>
    public const int AccessSummerUuidFieldNumber = 28;
    private string accessSummerUuid_ = "";
    /// <summary>
    /// uuidSommeratkomst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessSummerUuid {
      get { return accessSummerUuid_; }
      set {
        accessSummerUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessSummerNorth" field.</summary>
    public const int AccessSummerNorthFieldNumber = 29;
    private string accessSummerNorth_ = "";
    /// <summary>
    /// sommeratkomstNord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessSummerNorth {
      get { return accessSummerNorth_; }
      set {
        accessSummerNorth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessSummerEast" field.</summary>
    public const int AccessSummerEastFieldNumber = 30;
    private string accessSummerEast_ = "";
    /// <summary>
    /// sommeratkomstØst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessSummerEast {
      get { return accessSummerEast_; }
      set {
        accessSummerEast_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessWinterId" field.</summary>
    public const int AccessWinterIdFieldNumber = 31;
    private string accessWinterId_ = "";
    /// <summary>
    /// vinteratkomstId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessWinterId {
      get { return accessWinterId_; }
      set {
        accessWinterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessWinterUuid" field.</summary>
    public const int AccessWinterUuidFieldNumber = 32;
    private string accessWinterUuid_ = "";
    /// <summary>
    /// uuidVinteratkomst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessWinterUuid {
      get { return accessWinterUuid_; }
      set {
        accessWinterUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessWinterNorth" field.</summary>
    public const int AccessWinterNorthFieldNumber = 33;
    private string accessWinterNorth_ = "";
    /// <summary>
    /// vinteratkomstNord 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessWinterNorth {
      get { return accessWinterNorth_; }
      set {
        accessWinterNorth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessWinterEast" field.</summary>
    public const int AccessWinterEastFieldNumber = 34;
    private string accessWinterEast_ = "";
    /// <summary>
    /// vinteratkomstØst 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessWinterEast {
      get { return accessWinterEast_; }
      set {
        accessWinterEast_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CadastreRoadAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CadastreRoadAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddressId != other.AddressId) return false;
      if (AddressUuid != other.AddressUuid) return false;
      if (AddressCode != other.AddressCode) return false;
      if (AddressType != other.AddressType) return false;
      if (UpdateDate != other.UpdateDate) return false;
      if (MunicipalityNumber != other.MunicipalityNumber) return false;
      if (MunicipalityName != other.MunicipalityName) return false;
      if (CadastralUnitNumber != other.CadastralUnitNumber) return false;
      if (PropertyUnitNumber != other.PropertyUnitNumber) return false;
      if (LeaseNumber != other.LeaseNumber) return false;
      if (SubNumber != other.SubNumber) return false;
      if (AddressAdditionalName != other.AddressAdditionalName) return false;
      if (AddressName != other.AddressName) return false;
      if (Number != other.Number) return false;
      if (Letter != other.Letter) return false;
      if (AddressText != other.AddressText) return false;
      if (AddressTextWithoutAddressAdditionalName != other.AddressTextWithoutAddressAdditionalName) return false;
      if (PostalCode != other.PostalCode) return false;
      if (PostalCity != other.PostalCity) return false;
      if (EpsgCode != other.EpsgCode) return false;
      if (North != other.North) return false;
      if (East != other.East) return false;
      if (AccessId != other.AccessId) return false;
      if (AccessUuid != other.AccessUuid) return false;
      if (AccessNorth != other.AccessNorth) return false;
      if (AccessSouth != other.AccessSouth) return false;
      if (AccessSummerId != other.AccessSummerId) return false;
      if (AccessSummerUuid != other.AccessSummerUuid) return false;
      if (AccessSummerNorth != other.AccessSummerNorth) return false;
      if (AccessSummerEast != other.AccessSummerEast) return false;
      if (AccessWinterId != other.AccessWinterId) return false;
      if (AccessWinterUuid != other.AccessWinterUuid) return false;
      if (AccessWinterNorth != other.AccessWinterNorth) return false;
      if (AccessWinterEast != other.AccessWinterEast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AddressId.Length != 0) hash ^= AddressId.GetHashCode();
      if (AddressUuid.Length != 0) hash ^= AddressUuid.GetHashCode();
      if (AddressCode.Length != 0) hash ^= AddressCode.GetHashCode();
      if (AddressType.Length != 0) hash ^= AddressType.GetHashCode();
      if (UpdateDate.Length != 0) hash ^= UpdateDate.GetHashCode();
      if (MunicipalityNumber.Length != 0) hash ^= MunicipalityNumber.GetHashCode();
      if (MunicipalityName.Length != 0) hash ^= MunicipalityName.GetHashCode();
      if (CadastralUnitNumber.Length != 0) hash ^= CadastralUnitNumber.GetHashCode();
      if (PropertyUnitNumber.Length != 0) hash ^= PropertyUnitNumber.GetHashCode();
      if (LeaseNumber.Length != 0) hash ^= LeaseNumber.GetHashCode();
      if (SubNumber.Length != 0) hash ^= SubNumber.GetHashCode();
      if (AddressAdditionalName.Length != 0) hash ^= AddressAdditionalName.GetHashCode();
      if (AddressName.Length != 0) hash ^= AddressName.GetHashCode();
      if (Number.Length != 0) hash ^= Number.GetHashCode();
      if (Letter.Length != 0) hash ^= Letter.GetHashCode();
      if (AddressText.Length != 0) hash ^= AddressText.GetHashCode();
      if (AddressTextWithoutAddressAdditionalName.Length != 0) hash ^= AddressTextWithoutAddressAdditionalName.GetHashCode();
      if (PostalCode.Length != 0) hash ^= PostalCode.GetHashCode();
      if (PostalCity.Length != 0) hash ^= PostalCity.GetHashCode();
      if (EpsgCode.Length != 0) hash ^= EpsgCode.GetHashCode();
      if (North.Length != 0) hash ^= North.GetHashCode();
      if (East.Length != 0) hash ^= East.GetHashCode();
      if (AccessId.Length != 0) hash ^= AccessId.GetHashCode();
      if (AccessUuid.Length != 0) hash ^= AccessUuid.GetHashCode();
      if (AccessNorth.Length != 0) hash ^= AccessNorth.GetHashCode();
      if (AccessSouth.Length != 0) hash ^= AccessSouth.GetHashCode();
      if (AccessSummerId.Length != 0) hash ^= AccessSummerId.GetHashCode();
      if (AccessSummerUuid.Length != 0) hash ^= AccessSummerUuid.GetHashCode();
      if (AccessSummerNorth.Length != 0) hash ^= AccessSummerNorth.GetHashCode();
      if (AccessSummerEast.Length != 0) hash ^= AccessSummerEast.GetHashCode();
      if (AccessWinterId.Length != 0) hash ^= AccessWinterId.GetHashCode();
      if (AccessWinterUuid.Length != 0) hash ^= AccessWinterUuid.GetHashCode();
      if (AccessWinterNorth.Length != 0) hash ^= AccessWinterNorth.GetHashCode();
      if (AccessWinterEast.Length != 0) hash ^= AccessWinterEast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AddressId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AddressId);
      }
      if (AddressUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AddressUuid);
      }
      if (AddressCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AddressCode);
      }
      if (AddressType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddressType);
      }
      if (UpdateDate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UpdateDate);
      }
      if (MunicipalityNumber.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MunicipalityNumber);
      }
      if (MunicipalityName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MunicipalityName);
      }
      if (CadastralUnitNumber.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CadastralUnitNumber);
      }
      if (PropertyUnitNumber.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PropertyUnitNumber);
      }
      if (LeaseNumber.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LeaseNumber);
      }
      if (SubNumber.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SubNumber);
      }
      if (AddressAdditionalName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AddressAdditionalName);
      }
      if (AddressName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AddressName);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Number);
      }
      if (Letter.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Letter);
      }
      if (AddressText.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AddressText);
      }
      if (AddressTextWithoutAddressAdditionalName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AddressTextWithoutAddressAdditionalName);
      }
      if (PostalCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PostalCode);
      }
      if (PostalCity.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PostalCity);
      }
      if (EpsgCode.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(EpsgCode);
      }
      if (North.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(North);
      }
      if (East.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(East);
      }
      if (AccessId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(AccessId);
      }
      if (AccessUuid.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(AccessUuid);
      }
      if (AccessNorth.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(AccessNorth);
      }
      if (AccessSouth.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(AccessSouth);
      }
      if (AccessSummerId.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(AccessSummerId);
      }
      if (AccessSummerUuid.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AccessSummerUuid);
      }
      if (AccessSummerNorth.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(AccessSummerNorth);
      }
      if (AccessSummerEast.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(AccessSummerEast);
      }
      if (AccessWinterId.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(AccessWinterId);
      }
      if (AccessWinterUuid.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(AccessWinterUuid);
      }
      if (AccessWinterNorth.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(AccessWinterNorth);
      }
      if (AccessWinterEast.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(AccessWinterEast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AddressId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AddressId);
      }
      if (AddressUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AddressUuid);
      }
      if (AddressCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AddressCode);
      }
      if (AddressType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddressType);
      }
      if (UpdateDate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UpdateDate);
      }
      if (MunicipalityNumber.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MunicipalityNumber);
      }
      if (MunicipalityName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MunicipalityName);
      }
      if (CadastralUnitNumber.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CadastralUnitNumber);
      }
      if (PropertyUnitNumber.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PropertyUnitNumber);
      }
      if (LeaseNumber.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LeaseNumber);
      }
      if (SubNumber.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SubNumber);
      }
      if (AddressAdditionalName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AddressAdditionalName);
      }
      if (AddressName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AddressName);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Number);
      }
      if (Letter.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Letter);
      }
      if (AddressText.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AddressText);
      }
      if (AddressTextWithoutAddressAdditionalName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AddressTextWithoutAddressAdditionalName);
      }
      if (PostalCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PostalCode);
      }
      if (PostalCity.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PostalCity);
      }
      if (EpsgCode.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(EpsgCode);
      }
      if (North.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(North);
      }
      if (East.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(East);
      }
      if (AccessId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(AccessId);
      }
      if (AccessUuid.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(AccessUuid);
      }
      if (AccessNorth.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(AccessNorth);
      }
      if (AccessSouth.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(AccessSouth);
      }
      if (AccessSummerId.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(AccessSummerId);
      }
      if (AccessSummerUuid.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AccessSummerUuid);
      }
      if (AccessSummerNorth.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(AccessSummerNorth);
      }
      if (AccessSummerEast.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(AccessSummerEast);
      }
      if (AccessWinterId.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(AccessWinterId);
      }
      if (AccessWinterUuid.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(AccessWinterUuid);
      }
      if (AccessWinterNorth.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(AccessWinterNorth);
      }
      if (AccessWinterEast.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(AccessWinterEast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AddressId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressId);
      }
      if (AddressUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressUuid);
      }
      if (AddressCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressCode);
      }
      if (AddressType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressType);
      }
      if (UpdateDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateDate);
      }
      if (MunicipalityNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MunicipalityNumber);
      }
      if (MunicipalityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MunicipalityName);
      }
      if (CadastralUnitNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CadastralUnitNumber);
      }
      if (PropertyUnitNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyUnitNumber);
      }
      if (LeaseNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaseNumber);
      }
      if (SubNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubNumber);
      }
      if (AddressAdditionalName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressAdditionalName);
      }
      if (AddressName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressName);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (Letter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Letter);
      }
      if (AddressText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddressText);
      }
      if (AddressTextWithoutAddressAdditionalName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddressTextWithoutAddressAdditionalName);
      }
      if (PostalCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PostalCode);
      }
      if (PostalCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PostalCity);
      }
      if (EpsgCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EpsgCode);
      }
      if (North.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(North);
      }
      if (East.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(East);
      }
      if (AccessId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessId);
      }
      if (AccessUuid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessUuid);
      }
      if (AccessNorth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessNorth);
      }
      if (AccessSouth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessSouth);
      }
      if (AccessSummerId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessSummerId);
      }
      if (AccessSummerUuid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessSummerUuid);
      }
      if (AccessSummerNorth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessSummerNorth);
      }
      if (AccessSummerEast.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessSummerEast);
      }
      if (AccessWinterId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessWinterId);
      }
      if (AccessWinterUuid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessWinterUuid);
      }
      if (AccessWinterNorth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessWinterNorth);
      }
      if (AccessWinterEast.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessWinterEast);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CadastreRoadAddress other) {
      if (other == null) {
        return;
      }
      if (other.AddressId.Length != 0) {
        AddressId = other.AddressId;
      }
      if (other.AddressUuid.Length != 0) {
        AddressUuid = other.AddressUuid;
      }
      if (other.AddressCode.Length != 0) {
        AddressCode = other.AddressCode;
      }
      if (other.AddressType.Length != 0) {
        AddressType = other.AddressType;
      }
      if (other.UpdateDate.Length != 0) {
        UpdateDate = other.UpdateDate;
      }
      if (other.MunicipalityNumber.Length != 0) {
        MunicipalityNumber = other.MunicipalityNumber;
      }
      if (other.MunicipalityName.Length != 0) {
        MunicipalityName = other.MunicipalityName;
      }
      if (other.CadastralUnitNumber.Length != 0) {
        CadastralUnitNumber = other.CadastralUnitNumber;
      }
      if (other.PropertyUnitNumber.Length != 0) {
        PropertyUnitNumber = other.PropertyUnitNumber;
      }
      if (other.LeaseNumber.Length != 0) {
        LeaseNumber = other.LeaseNumber;
      }
      if (other.SubNumber.Length != 0) {
        SubNumber = other.SubNumber;
      }
      if (other.AddressAdditionalName.Length != 0) {
        AddressAdditionalName = other.AddressAdditionalName;
      }
      if (other.AddressName.Length != 0) {
        AddressName = other.AddressName;
      }
      if (other.Number.Length != 0) {
        Number = other.Number;
      }
      if (other.Letter.Length != 0) {
        Letter = other.Letter;
      }
      if (other.AddressText.Length != 0) {
        AddressText = other.AddressText;
      }
      if (other.AddressTextWithoutAddressAdditionalName.Length != 0) {
        AddressTextWithoutAddressAdditionalName = other.AddressTextWithoutAddressAdditionalName;
      }
      if (other.PostalCode.Length != 0) {
        PostalCode = other.PostalCode;
      }
      if (other.PostalCity.Length != 0) {
        PostalCity = other.PostalCity;
      }
      if (other.EpsgCode.Length != 0) {
        EpsgCode = other.EpsgCode;
      }
      if (other.North.Length != 0) {
        North = other.North;
      }
      if (other.East.Length != 0) {
        East = other.East;
      }
      if (other.AccessId.Length != 0) {
        AccessId = other.AccessId;
      }
      if (other.AccessUuid.Length != 0) {
        AccessUuid = other.AccessUuid;
      }
      if (other.AccessNorth.Length != 0) {
        AccessNorth = other.AccessNorth;
      }
      if (other.AccessSouth.Length != 0) {
        AccessSouth = other.AccessSouth;
      }
      if (other.AccessSummerId.Length != 0) {
        AccessSummerId = other.AccessSummerId;
      }
      if (other.AccessSummerUuid.Length != 0) {
        AccessSummerUuid = other.AccessSummerUuid;
      }
      if (other.AccessSummerNorth.Length != 0) {
        AccessSummerNorth = other.AccessSummerNorth;
      }
      if (other.AccessSummerEast.Length != 0) {
        AccessSummerEast = other.AccessSummerEast;
      }
      if (other.AccessWinterId.Length != 0) {
        AccessWinterId = other.AccessWinterId;
      }
      if (other.AccessWinterUuid.Length != 0) {
        AccessWinterUuid = other.AccessWinterUuid;
      }
      if (other.AccessWinterNorth.Length != 0) {
        AccessWinterNorth = other.AccessWinterNorth;
      }
      if (other.AccessWinterEast.Length != 0) {
        AccessWinterEast = other.AccessWinterEast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AddressId = input.ReadString();
            break;
          }
          case 18: {
            AddressUuid = input.ReadString();
            break;
          }
          case 26: {
            AddressCode = input.ReadString();
            break;
          }
          case 34: {
            AddressType = input.ReadString();
            break;
          }
          case 42: {
            UpdateDate = input.ReadString();
            break;
          }
          case 50: {
            MunicipalityNumber = input.ReadString();
            break;
          }
          case 58: {
            MunicipalityName = input.ReadString();
            break;
          }
          case 66: {
            CadastralUnitNumber = input.ReadString();
            break;
          }
          case 74: {
            PropertyUnitNumber = input.ReadString();
            break;
          }
          case 82: {
            LeaseNumber = input.ReadString();
            break;
          }
          case 90: {
            SubNumber = input.ReadString();
            break;
          }
          case 98: {
            AddressAdditionalName = input.ReadString();
            break;
          }
          case 106: {
            AddressName = input.ReadString();
            break;
          }
          case 114: {
            Number = input.ReadString();
            break;
          }
          case 122: {
            Letter = input.ReadString();
            break;
          }
          case 130: {
            AddressText = input.ReadString();
            break;
          }
          case 138: {
            AddressTextWithoutAddressAdditionalName = input.ReadString();
            break;
          }
          case 146: {
            PostalCode = input.ReadString();
            break;
          }
          case 154: {
            PostalCity = input.ReadString();
            break;
          }
          case 162: {
            EpsgCode = input.ReadString();
            break;
          }
          case 170: {
            North = input.ReadString();
            break;
          }
          case 178: {
            East = input.ReadString();
            break;
          }
          case 186: {
            AccessId = input.ReadString();
            break;
          }
          case 194: {
            AccessUuid = input.ReadString();
            break;
          }
          case 202: {
            AccessNorth = input.ReadString();
            break;
          }
          case 210: {
            AccessSouth = input.ReadString();
            break;
          }
          case 218: {
            AccessSummerId = input.ReadString();
            break;
          }
          case 226: {
            AccessSummerUuid = input.ReadString();
            break;
          }
          case 234: {
            AccessSummerNorth = input.ReadString();
            break;
          }
          case 242: {
            AccessSummerEast = input.ReadString();
            break;
          }
          case 250: {
            AccessWinterId = input.ReadString();
            break;
          }
          case 258: {
            AccessWinterUuid = input.ReadString();
            break;
          }
          case 266: {
            AccessWinterNorth = input.ReadString();
            break;
          }
          case 274: {
            AccessWinterEast = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AddressId = input.ReadString();
            break;
          }
          case 18: {
            AddressUuid = input.ReadString();
            break;
          }
          case 26: {
            AddressCode = input.ReadString();
            break;
          }
          case 34: {
            AddressType = input.ReadString();
            break;
          }
          case 42: {
            UpdateDate = input.ReadString();
            break;
          }
          case 50: {
            MunicipalityNumber = input.ReadString();
            break;
          }
          case 58: {
            MunicipalityName = input.ReadString();
            break;
          }
          case 66: {
            CadastralUnitNumber = input.ReadString();
            break;
          }
          case 74: {
            PropertyUnitNumber = input.ReadString();
            break;
          }
          case 82: {
            LeaseNumber = input.ReadString();
            break;
          }
          case 90: {
            SubNumber = input.ReadString();
            break;
          }
          case 98: {
            AddressAdditionalName = input.ReadString();
            break;
          }
          case 106: {
            AddressName = input.ReadString();
            break;
          }
          case 114: {
            Number = input.ReadString();
            break;
          }
          case 122: {
            Letter = input.ReadString();
            break;
          }
          case 130: {
            AddressText = input.ReadString();
            break;
          }
          case 138: {
            AddressTextWithoutAddressAdditionalName = input.ReadString();
            break;
          }
          case 146: {
            PostalCode = input.ReadString();
            break;
          }
          case 154: {
            PostalCity = input.ReadString();
            break;
          }
          case 162: {
            EpsgCode = input.ReadString();
            break;
          }
          case 170: {
            North = input.ReadString();
            break;
          }
          case 178: {
            East = input.ReadString();
            break;
          }
          case 186: {
            AccessId = input.ReadString();
            break;
          }
          case 194: {
            AccessUuid = input.ReadString();
            break;
          }
          case 202: {
            AccessNorth = input.ReadString();
            break;
          }
          case 210: {
            AccessSouth = input.ReadString();
            break;
          }
          case 218: {
            AccessSummerId = input.ReadString();
            break;
          }
          case 226: {
            AccessSummerUuid = input.ReadString();
            break;
          }
          case 234: {
            AccessSummerNorth = input.ReadString();
            break;
          }
          case 242: {
            AccessSummerEast = input.ReadString();
            break;
          }
          case 250: {
            AccessWinterId = input.ReadString();
            break;
          }
          case 258: {
            AccessWinterUuid = input.ReadString();
            break;
          }
          case 266: {
            AccessWinterNorth = input.ReadString();
            break;
          }
          case 274: {
            AccessWinterEast = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
