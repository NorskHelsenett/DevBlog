@page "/access-management"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@inject ILogger<AccessManagement> Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject KafkaUserAccessManagementApiService KafkaUserAccessManagementApiService
@inject ToastService ToastService

<h2>User Access Management</h2>

<div id="userAccessMappingsContainer">
    <div id="uamResourcesOverview">
        <h3>Add new resource to manage</h3>
        <input class="form-control mb-1" type="text" placeholder="your resource/identifier" @bind="_enteredNewResourceIdentifier"/>
        <button class="btn btn-primary" @onclick="AddNewResourceToManage">Add</button>
        <h3>Resources overview</h3>
        <table class="table table-striped table-hover">
            <thead>
            <tr>
                <th>Resource Owner</th>
                <th>Resource Name</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var uam in _userAccessMappings)
            {
                <tr @onclick="() => _chosenUserAccessMapping = uam">
                    <td>@uam.Owner</td>
                    <td>@uam.BlobName</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div id="uamUpdateAccessPane">
        @if (_chosenUserAccessMapping != default)
        {
            <h3>Update resource access for <span class="text-info">@_chosenUserAccessMapping.Owner</span>:<span class="text-primary">@_chosenUserAccessMapping.BlobName</span></h3>
            <div>
                <button class="btn btn-primary" @onclick="SaveUserAccessMapping">Save</button>
                <button class="btn btn btn-danger">Delete</button>
            </div>
            <div id="uamUpdateAccessPaneDetails">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th colspan="2">Change Access</th>
                        <th colspan="2">Retrieve</th>
                        <th colspan="2">Edit</th>
                        <th colspan="2">Delete</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (UserCanEditAccessMapping(_chosenUserAccessMapping))
                    {
                        <tr>
                            <td><input id="uam-add-user-change-access" class="form-control" type="text" placeholder="someone@example.com" @bind="_enteredNewUserForCanChangeAccess"></td>
                            <td><button class="btn btn-outline-primary" @onclick="() => {
                                if(_enteredNewUserForCanChangeAccess?.Length > 2){ _chosenUserAccessMapping.CanChangeAccess.Add(_enteredNewUserForCanChangeAccess); _enteredNewUserForCanChangeAccess = default;} }">Add</button></td>

                            <td><input id="uam-add-user-retrieve" class="form-control" type="text" placeholder="someone@example.com" @bind="_enteredNewUserForCanRetrieve"></td>
                            <td><button class="btn btn-outline-primary" @onclick="() => {
                                if(_enteredNewUserForCanRetrieve?.Length > 2){ _chosenUserAccessMapping.CanRetrieve.Add(_enteredNewUserForCanRetrieve); _enteredNewUserForCanRetrieve = default;} }">Add</button></td>

                            <td><input id="uam-add-user-edit" class="form-control" type="text" placeholder="someone@example.com" @bind="_enteredNewUserForCanEdit"></td>
                            <td><button class="btn btn-outline-primary "@onclick="() => {
                                if(_enteredNewUserForCanEdit?.Length > 2){ _chosenUserAccessMapping.CanChange.Add(_enteredNewUserForCanEdit); _enteredNewUserForCanEdit = default;} }">Add</button></td>

                            <td><input id="uam-add-user-delete" class="form-control" type="text" placeholder="someone@example.com" @bind="_enteredNewUserForCanDelete"></td>
                            <td><button class="btn btn-outline-primary" @onclick="() => {
                                if(_enteredNewUserForCanDelete?.Length > 2){ _chosenUserAccessMapping.CanDelete.Add(_enteredNewUserForCanDelete); _enteredNewUserForCanDelete = default;} }">Add</button></td>

                        </tr>
                    }
                    @for(var i = 0; i < _chosenUserAccessMapping.CanChangeAccess.Count
                                 || i < _chosenUserAccessMapping.CanRetrieve.Count
                                 || i < _chosenUserAccessMapping.CanChange.Count
                                 || i < _chosenUserAccessMapping.CanDelete.Count; i++)
                    {
                        int cpy = i;
                        <tr>
                            @if (i < _chosenUserAccessMapping.CanChangeAccess.Count)
                            {
                            <td>@_chosenUserAccessMapping.CanChangeAccess[i]</td>
                            <td>
                                @if(UserCanEditAccessMapping(_chosenUserAccessMapping)){<button class="btn btn-outline-danger" @onclick="() => _chosenUserAccessMapping.CanChangeAccess.RemoveAt(cpy)">Delete</button>}
                            </td>
                            }
                            else {<td></td><td></td>}
                            @if (i < _chosenUserAccessMapping.CanRetrieve.Count)
                            {
                            <td>@_chosenUserAccessMapping.CanRetrieve[i]</td>
                            <td>
                                @if(UserCanEditAccessMapping(_chosenUserAccessMapping)){<button class="btn btn-outline-danger" @onclick="() => _chosenUserAccessMapping.CanRetrieve.RemoveAt(cpy)">Delete</button>}
                            </td>
                            }
                            else {<td></td><td></td>}
                            @if (i < _chosenUserAccessMapping.CanChange.Count)
                            {
                            <td>@_chosenUserAccessMapping.CanChange[i]</td>
                            <td>
                                @if(UserCanEditAccessMapping(_chosenUserAccessMapping)){<button class="btn btn-outline-danger" @onclick="() => _chosenUserAccessMapping.CanChange.RemoveAt(cpy)">Delete</button>}
                            </td>
                            }
                            else {<td></td><td></td>}
                            @if (i < _chosenUserAccessMapping.CanDelete.Count)
                            {
                            <td>@_chosenUserAccessMapping.CanDelete[i]</td>
                            <td>
                                @if(UserCanEditAccessMapping(_chosenUserAccessMapping)){<button class="btn btn-outline-danger" @onclick="() => _chosenUserAccessMapping.CanDelete.RemoveAt(cpy)">Delete</button>}
                            </td>
                            }
                            else {<td></td><td></td>}
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code
{
    private List<ApiParamUserAccessMapping> _userAccessMappings = [];
    private ApiParamUserAccessMapping? _chosenUserAccessMapping = default;
    private string? _enteredNewResourceIdentifier = "";
    private string? _enteredNewUserForCanChangeAccess = "";
    private string? _enteredNewUserForCanRetrieve = "";
    private string? _enteredNewUserForCanEdit = "";
    private string? _enteredNewUserForCanDelete = "";

    protected override async Task OnInitializedAsync()
    {
        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        _userAccessMappings  = await KafkaUserAccessManagementApiService.GetUserAccessMappings(accessToken);
        // InitSampleData();
        await base.OnInitializedAsync();
    }

    private bool UserCanEditAccessMapping(ApiParamUserAccessMapping accessMapping)
    {
        var userId = HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        if (userId == null) return false;
        return accessMapping.Owner == userId || accessMapping.CanChangeAccess.Contains(userId);
    }

    private async void SaveUserAccessMapping()
    {
        if(_chosenUserAccessMapping == default) return;
        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        ToastService.ShowToast(
            message: "Saving",
            level: ToastLevel.Info,
            duration: TimeSpan.FromSeconds(1)
            );
        var storeSuccessful = await KafkaUserAccessManagementApiService.RegisterUserAccessMappings(accessToken, _chosenUserAccessMapping);
        if (storeSuccessful)
        {
            _chosenUserAccessMapping = default;
            StateHasChanged();
            ToastService.ShowToast(
                message: "Saved",
                level: ToastLevel.Success,
                duration: TimeSpan.FromSeconds(1)
            );
            await Task.Delay(TimeSpan.FromSeconds(2));
            _userAccessMappings  = await KafkaUserAccessManagementApiService.GetUserAccessMappings(accessToken);
            StateHasChanged();
        }
        else
        {
            ToastService.ShowToast(
                message: $"Failed to save",
                level: ToastLevel.Error,
                duration: TimeSpan.FromSeconds(7)
            );
        }
    }

    private void AddNewResourceToManage()
    {
        if (string.IsNullOrWhiteSpace(_enteredNewResourceIdentifier)) return;
        var userId = HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ?? "Failed to get user ID";
        var createdAccessMapping = new ApiParamUserAccessMapping
        {
            Owner = userId,
            BlobName = _enteredNewResourceIdentifier,
            CanChangeAccess = new List<string>(),
            CanRetrieve = new List<string>(),
            CanChange = new List<string>(),
            CanDelete = new List<string>()
        };
        // _userAccessMappings.Add(createdAccessMapping);
        _enteredNewResourceIdentifier = "";
        _chosenUserAccessMapping = createdAccessMapping;
    }

    private void InitSampleData()
    {
        var userId = HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ?? "Failed to get user ID";
        _userAccessMappings.Add(new ApiParamUserAccessMapping
        {
            BlobName = "Example resource ID 1",
            Owner = userId,
            CanChangeAccess = ["a@example.com", "b@example.com", "c@example.com"],
            CanChange = ["a@example.com", "b@example.com", "c@example.com", "d@example.com"],
            CanRetrieve = ["a@example.com", "b@example.com"],
            CanDelete = ["a@example.com"]
        });
        _userAccessMappings.Add(new ApiParamUserAccessMapping
        {
            BlobName = "Example resource ID 2",
            Owner = userId,
            CanChangeAccess = [],
            CanChange = [],
            CanRetrieve = ["a@example.com", "b@example.com"],
            CanDelete = []
        });
        _userAccessMappings.Add(new ApiParamUserAccessMapping
        {
            BlobName = "Example resource ID 3",
            Owner = userId,
            CanChangeAccess = [],
            CanChange = [],
            CanRetrieve = ["a@example.com", "b@example.com"],
            CanDelete = []
        });
        _userAccessMappings.Add(new ApiParamUserAccessMapping
        {
            BlobName = "Example resource ID 2",
            Owner = "a@example.com",
            CanChangeAccess = ["a@example.com", userId, "b@example.com", "c@example.com"],
            CanChange = ["a@example.com", "b@example.com", "c@example.com", "d@example.com"],
            CanRetrieve = ["a@example.com", "b@example.com"],
            CanDelete = ["a@example.com"]
        });
        _userAccessMappings.Add(new ApiParamUserAccessMapping
        {
            BlobName = "Example resource ID 1",
            Owner = "b@example.com",
            CanChangeAccess = ["a@example.com", userId, "b@example.com", "c@example.com"],
            CanChange = ["a@example.com", "b@example.com", "c@example.com", "d@example.com"],
            CanRetrieve = ["a@example.com", "b@example.com"],
            CanDelete = ["a@example.com"]
        });
    }
}
