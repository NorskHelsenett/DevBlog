@page "/filelist"
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@inject IJSRuntime Js;
@inject ILogger<FileList> Logger;
@inject IHttpContextAccessor HttpContextAccessor;
@inject KafkaFileApiService KafkaFileApiService;
@inject ToastService ToastService
@inject KafkaUserAccessManagementApiService KafkaUserAccessManagementApiService;

<PageTitle>File List</PageTitle>

<h1>Your Files:</h1>

<div>
    <InputFile id="filepicker" class="btn btn-primary" OnChange="@AddFile" />
</div>

<div>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Rights</th>
                <th>Delete</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in _files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Rights</td>
                    <td><button class="btn btn-primary" hidden="@file.Delete" @onclick="()=>DeleteFile(file.Name)">Delete</button></td>
                    <td><button class="btn btn-primary" hidden="@file.Download" @onclick="()=>DownloadFile(file.Name,file.OwnerName)">Download</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>
@code {
    private List<SecretFile> _files = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchFilesFromApi();
    }
    private async Task DeleteFile(string fileName){
        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var filesaveResponse = await KafkaFileApiService.DeleteFile(accessToken, fileName);

    }
    private async Task DownloadFile(string fileName, string ownerName)
    {
        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var fileStream = await KafkaFileApiService.RetrievFile(accessToken, fileName, ownerName);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);


    }
    private async Task AddFile(InputFileChangeEventArgs e)
    {
        Logger.LogDebug($"Trying to do some stuff on client side: {e.FileCount}, filename: {e.File.Name} size {e.File.Size}");

        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var stream = e.File.OpenReadStream(maxAllowedSize: long.MaxValue);
        Logger.LogDebug("Stream opened, calling further down the chain");
        ToastService.ShowToast(
            message: "Upload started",
            level: ToastLevel.Info,
            duration: TimeSpan.FromSeconds(3)
        );
        var filesaveResponse = await KafkaFileApiService.SaveFile(accessToken, stream, e.File.Name);
        if (filesaveResponse)
        {
            Logger.LogDebug("Upload Serverside worked");
            ToastService.ShowToast(
                message: "Uploaded",
                level: ToastLevel.Success,
                duration: TimeSpan.FromSeconds(1)
            );
            await Task.Delay(TimeSpan.FromSeconds(4));
        }
        else
        {
            Logger.LogWarning("upload had some trouble");
            ToastService.ShowToast(
                message: $"Failed during upload",
                level: ToastLevel.Error,
                duration: TimeSpan.FromSeconds(7)
            );
        }
        await FetchFilesFromApi();
        StateHasChanged();
    }

    private async Task FetchFilesFromApi()
    {

        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var fileListFromApi = await KafkaUserAccessManagementApiService.GetUserAccessMappings(accessToken);
        _files = fileListFromApi.Select(MappToDTO).ToList();
        StateHasChanged();
    }
    private SecretFile MappToDTO(ApiParamUserAccessMapping thingToMapp){
        return new SecretFile{
            Name = thingToMapp.BlobName,
            OwnerName = thingToMapp.Owner,
            Rights = GetRights(thingToMapp)
        };
    }
    private FileRights GetRights(ApiParamUserAccessMapping thingToMapp)
    {
        var myName = HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var rights = FileRights.NotSet;
        if (string.IsNullOrWhiteSpace(myName)) return rights;

        if(string.Equals(thingToMapp.Owner,myName)) rights = FileRights.Owner | rights;
        if(thingToMapp.CanRetrieve.Contains(myName)) rights = FileRights.Shared | rights;

        return rights;

    }
}
