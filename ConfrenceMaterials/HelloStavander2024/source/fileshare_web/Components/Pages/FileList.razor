@page "/filelist"
@using Microsoft.AspNetCore.Authentication
@inject IJSRuntime Js;
@inject ILogger<FileList> Logger;
@inject IHttpContextAccessor HttpContextAccessor;
@inject KafkaFileApiService KafkaFileApiService;
@inject ToastService ToastService

<PageTitle>File List</PageTitle>

<h1>Your Files:</h1>

<div>
    <InputFile id="filepicker" class="btn btn-primary" OnChange="@AddFile" />
</div>

<div>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Rights</th>
                <th>Delete</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in _files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Rights</td>
                    <td><button class="btn btn-primary" hidden="@file.Delete" @onclick="()=>DeleteFile(file.Name)">Delete</button></td>
                    <td><button class="btn btn-primary" hidden="@file.Download">Download</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<SecretFile> _files = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchFilesFromApi();
    }
    private async Task DeleteFile(string fileName){
        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var filesaveResponse = await KafkaFileApiService.DeleteFile(accessToken, fileName);

    }
    private async Task AddFile(InputFileChangeEventArgs e)
    {
        Logger.LogDebug($"Trying to do some stuff on client side: {e.FileCount}, filename: {e.File.Name} size {e.File.Size}");

        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var stream = e.File.OpenReadStream(maxAllowedSize: long.MaxValue);
        Logger.LogDebug("Stream opened, calling further down the chain");
        ToastService.ShowToast(
            message: "Upload started",
            level: ToastLevel.Info,
            duration: TimeSpan.FromSeconds(1)
        );
        var filesaveResponse = await KafkaFileApiService.SaveFile(accessToken, stream, e.File.Name);
        if (filesaveResponse)
        {
            Logger.LogDebug("Upload Serverside worked");
            ToastService.ShowToast(
                message: "Uploaded",
                level: ToastLevel.Success,
                duration: TimeSpan.FromSeconds(1)
            );
            await Task.Delay(TimeSpan.FromSeconds(4));
        }
        else
        {
            Logger.LogWarning("upload had some trouble");
            ToastService.ShowToast(
                message: $"Failed during upload",
                level: ToastLevel.Error,
                duration: TimeSpan.FromSeconds(7)
            );
        }
        await FetchFilesFromApi();
        StateHasChanged();
    }

    private async Task FetchFilesFromApi()
    {

        var accessToken = HttpContextAccessor.HttpContext?.GetTokenAsync("access_token").Result ?? "";
        var fileListFromApi = await KafkaFileApiService.GetListOfFiles(accessToken);
        _files = fileListFromApi;
        StateHasChanged();
    }
}
